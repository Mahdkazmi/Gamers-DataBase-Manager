  Node* search(Node* node, string id) {
        if(node == nullptr || node -> Id == id) {
            return node;
        }
        if(id < node -> Id) {
            return search(node -> left , id);
        } else {
            return search(node -> right, id);
        }
    }

    Node* search(string Id) {
        return search(root, Id);
    }

    // minimum value for deletion
    Node* minimumVal(Node* node) {
        while(node -> left != nullptr) {
            node = node -> left;
            return node;
        }
    }

    Node* deleteNode(Node* node, string id) {
        if(node == nullptr) {
            return node;
        }
        if(id < node -> Id) {
            node -> left = deleteNode(node -> left, id);
        } else if (id > node -> Id) {
            node -> right = deleteNode(node -> right , id);
        } else {
            if(node -> left == nullptr) {
                Node* temp = node -> right;
                delete node;
                return temp;
            } else if(node -> right == nullptr) {
                Node* temp = node -> left;
                delete node;
                return temp;
            } else if (node -> right == nullptr) {
                Node* temp = node -> left;
                delete node;
                return temp;
            }
            Node* temp = minimumVal(node -> right);
            node ->Id = temp -> Id ;
            node -> name = temp -> name;
            node -> developer = temp -> developer;
            node -> publisher = temp -> publisher;
            node -> size = temp -> size;
            node -> download = temp -> download;
            node -> right = deleteNode(node -> right, temp -> Id);
        }
        return node;
    }

    void delNode(string id) {
        root = deleteNode(root, id);
    }

    // applying preorder traversal for saving 

    void saveData(Node* node, ofstream& file) {
        if(node == nullptr) {
            return;
        }
        file << node -> Id << "," << node -> name << "," << node -> developer << "," <<
            node -> publisher << "," << node -> size << "," << node -> download << endl;
        saveData(node -> left, file);
        saveData(node -> right, file);
    }

    void saveInFile(const string& filename) {
        ofstream file(filename);
        if(file.is_open()) {
            saveData(root, file);
            file.close();
        } else {
            cout << "Unable to open the file" << endl;
        }
    }
    
    void inorder(Node* node) {
        if (node == nullptr) return;
        inorder(node->left);
        cout << node->Id << ", " << node->name << ", " << node->developer << ", "
             << node->publisher << ", " << node->size << ", " << node->download << endl;
        inorder(node->right);
    }

    void inorder() { 
        inorder(root); 
    }
